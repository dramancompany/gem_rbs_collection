module BusinessTime
  # controls the behavior of this gem.  You can change
  # the beginning_of_workday, end_of_workday, and the list of holidays
  # manually, or with a yaml file and the load method.
  class Config
    DEFAULT_CONFIG: Hash[Symbol, untyped]

    def self.beginning_of_workday=: (String | Time time) -> (String | Time)

    def self.end_of_workday=: (String | Time time) -> (String | Time)

    def self.work_hours=: (Hash[Symbol, [String | Time, String | Time]] work_hours) -> Hash[Symbol, Time | String]

    attr_reader self.work_week: Array[String]

    # You can set this yourself, either by the load method below, or
    # by saying
    #   BusinessTime::Config.holidays << my_holiday_date_object
    # someplace in the initializers of your application.
    attr_accessor self.holidays: Set[Date]

    # working hours for each day - if not set using global variables :beginning_of_workday
    # and end_of_workday. Keys will be added ad weekdays.
    # Example:
    #    {:mon => ["9:00","17:00"],:tue => ["9:00","17:00"].....}
    attr_reader self.work_hours: Hash[Symbol, [BusinessTime::ParsedTime, BusinessTime::ParsedTime]]

    # total work hours for a day. Never set, always calculated.
    attr_accessor self.work_hours_total: Hash[Symbol, Integer]

    attr_accessor self.fiscal_month_offset: Integer

    # You can set this yourself, either by the load method below, or
    # by saying
    #   BusinessTime::Config.end_of_workday = "5:30 pm"
    # someplace in the initializers of your application.
    def self.end_of_workday: (?untyped day) -> BusinessTime::ParsedTime

    # You can set this yourself, either by the load method below, or
    # by saying
    #   BusinessTime::Config.beginning_of_workday = "8:30 am"
    # someplace in the initializers of your application.
    def self.beginning_of_workday: (?untyped day) -> BusinessTime::ParsedTime

    # You can set this yourself, either by the load method below, or
    # by saying
    #   BusinessTime::Config.work_week = [:sun, :mon, :tue, :wed, :thu]
    # someplace in the initializers of your application.
    def self.work_week=: (Array[Symbol]) -> Array[Symbol]

    def self.weekdays: () -> Set[Integer]

    # loads the config data from a yaml file written as:
    #
    #   business_time:
    #     beginning_od_workday: 8:30 am
    #     end_of_workday: 5:30 pm
    #     holidays:
    #       - Jan 1st, 2010
    #       - July 4th, 2010
    #       - Dec 25th, 2010
    def self.load: (IO | String file) -> void

    def self.with: (Hash[Symbol, untyped] config) { () -> void } -> void

    def self.default_config: () -> Hash[Symbol, untyped]
  end
end
